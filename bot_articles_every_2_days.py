# bot_articles_every_2_days.py
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import time, timedelta
import asyncio

import os
TOKEN = os.environ["TOKEN"]

# –ü—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
articles = [
    "–°—Ç–∞—Ç—Ç—è 1: –í—Å—Ç—É–ø –¥–æ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó ‚Äî —è–∫ –ø—Ä–∞—Ü—é—î —Ä–æ–∑—É–º.",
    "–°—Ç–∞—Ç—Ç—è 2: –î–∏—Ö–∞–Ω–Ω—è —è–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞—Å–ø–æ–∫–æ—î–Ω–Ω—è.",
    "–°—Ç–∞—Ç—Ç—è 3: –Ø–∫ –∑–º–µ–Ω—à–∏—Ç–∏ —Å—Ç—Ä–µ—Å —á–µ—Ä–µ–∑ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ—Å—Ç—å.",
    "–°—Ç–∞—Ç—Ç—è 4: –ü–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–Ω–∞ –Ω–µ—Ä–≤–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: —â–æ —Ü–µ —ñ —è–∫ —ó—ó –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏.",
    "–°—Ç–∞—Ç—Ç—è 5: –†–æ–ª—å —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤ —É –ø–æ–¥–æ–ª–∞–Ω–Ω—ñ —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ."
]

# –ü—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: chat_id -> index —Å—Ç–∞—Ç—Ç—ñ
user_progress = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_progress[chat_id] = 0  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–∞—Ç—Ç—ñ
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é –∫–æ–∂–Ω—ñ 2 –¥–Ω—ñ üì∞")

    # –†–æ–∑–∫–ª–∞–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: —â–æ–¥–Ω—è, –∞–ª–µ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–Ω—ñ 2 –¥–Ω—ñ
    context.job_queue.run_repeating(
        send_article_if_due,
        interval=timedelta(days=1),  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ–¥–Ω—è
        first=timedelta(seconds=5),  # –ø–æ—á–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        chat_id=chat_id,
        name=str(chat_id)
    )

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ
async def send_article_if_due(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    idx = user_progress.get(chat_id, 0)

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ job.context
    if 'last_sent' not in context.job.context:
        context.job.context['last_sent'] = None

    now = context.job_queue._dispatcher.time_provider()
    last_sent = context.job.context['last_sent']

    # —è–∫—â–æ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 1 –¥–µ–Ω—å —ñ —î —â–µ —Å—Ç–∞—Ç—Ç—ñ
    if (last_sent is None or (now - last_sent) >= timedelta(days=2)) and idx < len(articles):
        await context.bot.send_message(chat_id=chat_id, text=articles[idx])
        user_progress[chat_id] = idx + 1
        context.job.context['last_sent'] = now
    elif idx >= len(articles):
        await context.bot.send_message(chat_id=chat_id, text="üü¢ –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—é, —â–æ —á–∏—Ç–∞–≤(–ª–∞)!")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    await app.initialize()
    await app.start()
    print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")
    await asyncio.Event().wait()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
