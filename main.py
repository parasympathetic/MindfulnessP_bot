from flask import Flask
from threading import Thread

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
)
from datetime import datetime, timedelta
import asyncio
import os

# üîπ Flask-—Å–µ—Ä–≤–µ—Ä
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))  # –ü–æ—Ä—Ç –¥–ª—è Replit –∞–±–æ PythonAnywhere
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É—î –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    flask_app.run(host='0.0.0.0', port=port)

# üîπ –°—Ç–∞—Ç—Ç—ñ
articles = [
    "–°—Ç–∞—Ç—Ç—è 1: –í—Å—Ç—É–ø –¥–æ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó ‚Äî —è–∫ –ø—Ä–∞—Ü—é—î —Ä–æ–∑—É–º.",
    "–°—Ç–∞—Ç—Ç—è 2: –î–∏—Ö–∞–Ω–Ω—è —è–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞—Å–ø–æ–∫–æ—î–Ω–Ω—è.",
    "–°—Ç–∞—Ç—Ç—è 3: –Ø–∫ –∑–º–µ–Ω—à–∏—Ç–∏ —Å—Ç—Ä–µ—Å —á–µ—Ä–µ–∑ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ—Å—Ç—å.",
    "–°—Ç–∞—Ç—Ç—è 4: –ü–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–Ω–∞ –Ω–µ—Ä–≤–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: —â–æ —Ü–µ —ñ —è–∫ —ó—ó –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏.",
    "–°—Ç–∞—Ç—Ç—è 5: –†–æ–ª—å —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤ —É –ø–æ–¥–æ–ª–∞–Ω–Ω—ñ —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ."
]

user_progress = {}

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_progress[chat_id] = {
        'index': 1,
        'last_sent': datetime.now()
    }

    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω üì∞")
    await context.bot.send_message(chat_id=chat_id, text=articles[0])

    context.job_queue.run_repeating(
        send_article_if_due,
        interval=timedelta(minutes=5),
        first=timedelta(minutes=5),
        chat_id=chat_id
    )

# üîπ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
async def send_article_if_due(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    progress = user_progress.get(chat_id)

    if not progress:
        return

    now = datetime.now()
    idx = progress['index']
    last_sent = progress['last_sent']

    if idx < len(articles) and (now - last_sent) >= timedelta(minutes=5):
        await context.bot.send_message(chat_id=chat_id, text=articles[idx])
        user_progress[chat_id] = {
            'index': idx + 1,
            'last_sent': now
        }
    elif idx >= len(articles):
        await context.bot.send_message(
            chat_id=chat_id,
            text="üü¢ –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—é, —â–æ —á–∏—Ç–∞–≤(–ª–∞)!"
        )

# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JobQueue
async def setup_jobqueue(app):
    if app.job_queue is None:
        app.job_queue = JobQueue()
        await app.job_queue.set_application(app)
        app.job_queue.start()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    app_bot = (
        ApplicationBuilder()
        .token("7554974295:AAF9p2Ve9vL-y-Yt9zJ_FoMywmbymHwlz6s")  # ‚ùó –ù–µ–±–µ–∑–ø–µ—á–Ω–æ ‚Äî –∫—Ä–∞—â–µ .env
        .post_init(setup_jobqueue)
        .build()
    )

    app_bot.add_handler(CommandHandler("start", start))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await app_bot.run_polling()

# üîπ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ —ñ –±–æ—Ç–∞
if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(run_bot())
